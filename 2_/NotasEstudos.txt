VUE JS

- importando cds do site vue e salvando scrippt
  no head do html

- criando arquivo script no head (defer executa a aplicação no carregamento do html)

- iniciando o elemento com id definido



 CRIANDO NOVA INSTANCIA DO VUE

-criando const com nome e ={}

- definindo um objeto com a propriedade data() que retorna dados 
pro front da aplicação

- após data() criar notação de função {}

return{ aqui todos os dados em forma de objeto chave e valor retornam pro front } 


-criar o app com base no ID da div criada no elemento html

Vue.createApp(NOME DA CONST).mount("#app")

mount=montar

TODO É TRATADO COMO COMPONENTE NO VUEJS


------------------------

DATA BINDING = muda um dado em tempo real por meio de um input

- V-MODEL = salvar dado do input em alguma parte da api do vue
- V-ON:CLICK = usado pra linkar a função do click com o api criado
 
-methods: chamar as funções
-console.log = tipo o echo, exibe a variável
-this.NomeDaVariavel 


------------------------------

CLI = ferramenta de linha de comando (digitar comandos)

- tem o Vue Router

- instalando o note

- npm run server(ERROR PERGUNTAR KLEBER)

--------------------------------------

próxima aula

- COMPONENTES
-cli instalado e pasta criada para o projeto

- tudo no vue é componente. cada parte do html (tamplate) é feita nos componentes.
- isso melhora a reutilização de um componente mantendo sua autonomia em cada local.
- para isso precisa exportar o componente no proprio script e importar ele no script
  da aplicação principal. logo após chama-lo pelo nome dele no elemento que for usar esse componente,

-----------------------

DADOS NOS COMPONENTES

- pode-se iniciar os componentes com dados chamando a função DATA e receber um RETURN em formato de chave e valor
- chave seria o nome do dado e o valor :victor
- dados serão retornados para os componentes chamados na aplicação
- pode criar o DATA no App root tbm

--------------------

LIFE CYCLE HOOKS 

- eventos que podem ser ativados em partes da execução do programa
- gatilho de função (exemplo)
- executa o código quando o componente é criado. criando diferentes ações
- o created cria um valor pra aquele elemento que é citado por meio do parâmetro this. =
- aqui os scripts servem para que eventos acontecam ao vivo com arrow functions (( => {} ,)
 
-------------------------

HIERARQUIA DE COMPONENTES

- árvore de componentes(uns que dependem de outros)
- cuidado para não criar uma complexidade desnecessária
- componentes com subcomponentes separa ainda mais as responsabilidades de cada componente
- reutilizar em outros componentes


-------------------------

MÉTODOS
- são como as funções. são baseados em eventos ou por alguma lógica de aplicação
- ficam num objeto chamado METHODS (próximo ao DATA)
- criaremos as funções que farão parte das ações da aplicação
- são invocadas por meio do @click 
- dentro do methods pode-se usar if else

-------------------------

CSS GLOBAL E SCOPED

- GLOBAL= definido no App e se aplica a todos os elementos
- SCOPED = onde cada componente tem seu estilo
- geralmente se usa o scoped para estilizar os componentes individualmente
- global é global em qualquer lugar da aplicação

- scoped= componente com CSS scoped tem prioridade sobre o global
- estilização especifica feita num coponente e estilizado no app

----------------------

REDERIZAÇÃO DE LISTAS
- as LISTAS (arrays) serão renderizadas por diretivas
- utilizando a diretiva v-for o dado pode vir de DATA, como um arrays
- cada item pode ser impresso junto do html
- v-for="(nome da lista, index) in nome do ARRAY criado no data" 
- usa-se o v-bind:key="index" para evitar erro de sintaxe

- quando for objeto tem que dar um id e um nome para o conteudo seguido do seu valor

-----------------------

EXPLORANDO EVENTOS
- eventos complementam ações do usuário com as ativções do metodos
- @click é um dos eventos que podem ser adicionados diretamente no HTML
- o evento recebe um "PARÂMETRO" que é o método que será executado
- @submit executa o input botton do form (criar method para o @submit)
- $event = objeto especial do vue que vai dentro do method
- e.preventDefault() = criando const com os nomes dos dados e pegando o this. do return para serem preeenchidos


----------------------------------

MÚLTIPOS EVENTOS
- Como ativar mais de um evento(evento que parte dop usuário) com uma única aplicação
- a sintaxe permanece a mesma porém separadas por vírgulas
- em methods as funções são separadas por vírgulas
- arrow functions { setTimeout (() => this.nomedoelemento = "valor a ser exibido" , tempoem Ms) }
- @click pode abrigar mais de um evento separado por vírgula e o VUE.JS proporciona isso de maneira
  dinâmica.


------------------------------------

REUTILIZAÇÃO DE COMPONENTES
- reutilização de componentes é comum e cada componente é totalmente independente
- podendo ativar seus métodos e mudar seus dados sempre que necessário
- invocar novamente o componente após a utilização do mesmo
- lembrar( todo DATA tem que ter o return )


----------------------------------

PASSAR DADOS COM PROPS
- os componentes do vue podem receber dados. este recurso é chamado de 
  props
- passados por valores DATA ou inseridos direto
- declarar as propriedades recebidas pelos componentes em um array ou 
 objeto



----------------------

* ESTUDAR : 
-manipulação de array: array.filter - array.push